# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robotnik_msgs/GetMotorsHeadingOffsetRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class GetMotorsHeadingOffsetRequest(genpy.Message):
  _md5sum = "57c42d82c9bab8a1ec9de111b7540471"
  _type = "robotnik_msgs/GetMotorsHeadingOffsetRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Empty request

================================================================================
MSG: std_msgs/Empty
"""
  __slots__ = ['request']
  _slot_types = ['std_msgs/Empty']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       request

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetMotorsHeadingOffsetRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.request is None:
        self.request = std_msgs.msg.Empty()
    else:
      self.request = std_msgs.msg.Empty()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.request is None:
        self.request = std_msgs.msg.Empty()
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.request is None:
        self.request = std_msgs.msg.Empty()
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robotnik_msgs/GetMotorsHeadingOffsetResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import robotnik_msgs.msg

class GetMotorsHeadingOffsetResponse(genpy.Message):
  _md5sum = "5893bfa41a37a6679598a2513e065848"
  _type = "robotnik_msgs/GetMotorsHeadingOffsetResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """robotnik_msgs/MotorHeadingOffset[] offsets


================================================================================
MSG: robotnik_msgs/MotorHeadingOffset
int32 motor
float64 value
"""
  __slots__ = ['offsets']
  _slot_types = ['robotnik_msgs/MotorHeadingOffset[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       offsets

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetMotorsHeadingOffsetResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.offsets is None:
        self.offsets = []
    else:
      self.offsets = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.offsets)
      buff.write(_struct_I.pack(length))
      for val1 in self.offsets:
        _x = val1
        buff.write(_get_struct_id().pack(_x.motor, _x.value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.offsets is None:
        self.offsets = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.offsets = []
      for i in range(0, length):
        val1 = robotnik_msgs.msg.MotorHeadingOffset()
        _x = val1
        start = end
        end += 12
        (_x.motor, _x.value,) = _get_struct_id().unpack(str[start:end])
        self.offsets.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.offsets)
      buff.write(_struct_I.pack(length))
      for val1 in self.offsets:
        _x = val1
        buff.write(_get_struct_id().pack(_x.motor, _x.value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.offsets is None:
        self.offsets = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.offsets = []
      for i in range(0, length):
        val1 = robotnik_msgs.msg.MotorHeadingOffset()
        _x = val1
        start = end
        end += 12
        (_x.motor, _x.value,) = _get_struct_id().unpack(str[start:end])
        self.offsets.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_id = None
def _get_struct_id():
    global _struct_id
    if _struct_id is None:
        _struct_id = struct.Struct("<id")
    return _struct_id
class GetMotorsHeadingOffset(object):
  _type          = 'robotnik_msgs/GetMotorsHeadingOffset'
  _md5sum = 'cdf947b0b6f5aca552a9fd0b8e9d235b'
  _request_class  = GetMotorsHeadingOffsetRequest
  _response_class = GetMotorsHeadingOffsetResponse
