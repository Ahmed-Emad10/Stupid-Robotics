# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robotnik_msgs/MotorsStatusDifferential.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import robotnik_msgs.msg

class MotorsStatusDifferential(genpy.Message):
  _md5sum = "54c939ea4e1227a032aeca24b67584ad"
  _type = "robotnik_msgs/MotorsStatusDifferential"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """MotorStatus lwStatus
MotorStatus rwStatus


================================================================================
MSG: robotnik_msgs/MotorStatus
uint8 can_id
string joint
string state
string status
string communicationstatus
string mode_of_operation
string[] activestatusword
string[] activedriveflags
bool[] digitaloutputs
bool[] digitalinputs
float32 current
float32[] analoginputs
string statusword
string driveflags


"""
  __slots__ = ['lwStatus','rwStatus']
  _slot_types = ['robotnik_msgs/MotorStatus','robotnik_msgs/MotorStatus']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       lwStatus,rwStatus

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MotorsStatusDifferential, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.lwStatus is None:
        self.lwStatus = robotnik_msgs.msg.MotorStatus()
      if self.rwStatus is None:
        self.rwStatus = robotnik_msgs.msg.MotorStatus()
    else:
      self.lwStatus = robotnik_msgs.msg.MotorStatus()
      self.rwStatus = robotnik_msgs.msg.MotorStatus()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.lwStatus.can_id
      buff.write(_get_struct_B().pack(_x))
      _x = self.lwStatus.joint
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.lwStatus.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.lwStatus.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.lwStatus.communicationstatus
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.lwStatus.mode_of_operation
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.lwStatus.activestatusword)
      buff.write(_struct_I.pack(length))
      for val1 in self.lwStatus.activestatusword:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.lwStatus.activedriveflags)
      buff.write(_struct_I.pack(length))
      for val1 in self.lwStatus.activedriveflags:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.lwStatus.digitaloutputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.lwStatus.digitaloutputs))
      length = len(self.lwStatus.digitalinputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.lwStatus.digitalinputs))
      _x = self.lwStatus.current
      buff.write(_get_struct_f().pack(_x))
      length = len(self.lwStatus.analoginputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.lwStatus.analoginputs))
      _x = self.lwStatus.statusword
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.lwStatus.driveflags
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.rwStatus.can_id
      buff.write(_get_struct_B().pack(_x))
      _x = self.rwStatus.joint
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.rwStatus.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.rwStatus.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.rwStatus.communicationstatus
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.rwStatus.mode_of_operation
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.rwStatus.activestatusword)
      buff.write(_struct_I.pack(length))
      for val1 in self.rwStatus.activestatusword:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.rwStatus.activedriveflags)
      buff.write(_struct_I.pack(length))
      for val1 in self.rwStatus.activedriveflags:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.rwStatus.digitaloutputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.rwStatus.digitaloutputs))
      length = len(self.rwStatus.digitalinputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.rwStatus.digitalinputs))
      _x = self.rwStatus.current
      buff.write(_get_struct_f().pack(_x))
      length = len(self.rwStatus.analoginputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.rwStatus.analoginputs))
      _x = self.rwStatus.statusword
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.rwStatus.driveflags
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.lwStatus is None:
        self.lwStatus = robotnik_msgs.msg.MotorStatus()
      if self.rwStatus is None:
        self.rwStatus = robotnik_msgs.msg.MotorStatus()
      end = 0
      start = end
      end += 1
      (self.lwStatus.can_id,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lwStatus.joint = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lwStatus.joint = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lwStatus.state = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lwStatus.state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lwStatus.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lwStatus.status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lwStatus.communicationstatus = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lwStatus.communicationstatus = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lwStatus.mode_of_operation = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lwStatus.mode_of_operation = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lwStatus.activestatusword = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.lwStatus.activestatusword.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lwStatus.activedriveflags = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.lwStatus.activedriveflags.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.lwStatus.digitaloutputs = s.unpack(str[start:end])
      self.lwStatus.digitaloutputs = list(map(bool, self.lwStatus.digitaloutputs))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.lwStatus.digitalinputs = s.unpack(str[start:end])
      self.lwStatus.digitalinputs = list(map(bool, self.lwStatus.digitalinputs))
      start = end
      end += 4
      (self.lwStatus.current,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.lwStatus.analoginputs = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lwStatus.statusword = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lwStatus.statusword = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lwStatus.driveflags = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lwStatus.driveflags = str[start:end]
      start = end
      end += 1
      (self.rwStatus.can_id,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rwStatus.joint = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rwStatus.joint = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rwStatus.state = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rwStatus.state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rwStatus.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rwStatus.status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rwStatus.communicationstatus = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rwStatus.communicationstatus = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rwStatus.mode_of_operation = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rwStatus.mode_of_operation = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.rwStatus.activestatusword = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.rwStatus.activestatusword.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.rwStatus.activedriveflags = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.rwStatus.activedriveflags.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.rwStatus.digitaloutputs = s.unpack(str[start:end])
      self.rwStatus.digitaloutputs = list(map(bool, self.rwStatus.digitaloutputs))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.rwStatus.digitalinputs = s.unpack(str[start:end])
      self.rwStatus.digitalinputs = list(map(bool, self.rwStatus.digitalinputs))
      start = end
      end += 4
      (self.rwStatus.current,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.rwStatus.analoginputs = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rwStatus.statusword = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rwStatus.statusword = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rwStatus.driveflags = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rwStatus.driveflags = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.lwStatus.can_id
      buff.write(_get_struct_B().pack(_x))
      _x = self.lwStatus.joint
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.lwStatus.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.lwStatus.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.lwStatus.communicationstatus
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.lwStatus.mode_of_operation
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.lwStatus.activestatusword)
      buff.write(_struct_I.pack(length))
      for val1 in self.lwStatus.activestatusword:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.lwStatus.activedriveflags)
      buff.write(_struct_I.pack(length))
      for val1 in self.lwStatus.activedriveflags:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.lwStatus.digitaloutputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.lwStatus.digitaloutputs.tostring())
      length = len(self.lwStatus.digitalinputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.lwStatus.digitalinputs.tostring())
      _x = self.lwStatus.current
      buff.write(_get_struct_f().pack(_x))
      length = len(self.lwStatus.analoginputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.lwStatus.analoginputs.tostring())
      _x = self.lwStatus.statusword
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.lwStatus.driveflags
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.rwStatus.can_id
      buff.write(_get_struct_B().pack(_x))
      _x = self.rwStatus.joint
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.rwStatus.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.rwStatus.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.rwStatus.communicationstatus
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.rwStatus.mode_of_operation
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.rwStatus.activestatusword)
      buff.write(_struct_I.pack(length))
      for val1 in self.rwStatus.activestatusword:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.rwStatus.activedriveflags)
      buff.write(_struct_I.pack(length))
      for val1 in self.rwStatus.activedriveflags:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.rwStatus.digitaloutputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.rwStatus.digitaloutputs.tostring())
      length = len(self.rwStatus.digitalinputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.rwStatus.digitalinputs.tostring())
      _x = self.rwStatus.current
      buff.write(_get_struct_f().pack(_x))
      length = len(self.rwStatus.analoginputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.rwStatus.analoginputs.tostring())
      _x = self.rwStatus.statusword
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.rwStatus.driveflags
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.lwStatus is None:
        self.lwStatus = robotnik_msgs.msg.MotorStatus()
      if self.rwStatus is None:
        self.rwStatus = robotnik_msgs.msg.MotorStatus()
      end = 0
      start = end
      end += 1
      (self.lwStatus.can_id,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lwStatus.joint = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lwStatus.joint = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lwStatus.state = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lwStatus.state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lwStatus.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lwStatus.status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lwStatus.communicationstatus = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lwStatus.communicationstatus = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lwStatus.mode_of_operation = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lwStatus.mode_of_operation = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lwStatus.activestatusword = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.lwStatus.activestatusword.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lwStatus.activedriveflags = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.lwStatus.activedriveflags.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.lwStatus.digitaloutputs = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.lwStatus.digitaloutputs = list(map(bool, self.lwStatus.digitaloutputs))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.lwStatus.digitalinputs = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.lwStatus.digitalinputs = list(map(bool, self.lwStatus.digitalinputs))
      start = end
      end += 4
      (self.lwStatus.current,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.lwStatus.analoginputs = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lwStatus.statusword = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lwStatus.statusword = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lwStatus.driveflags = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lwStatus.driveflags = str[start:end]
      start = end
      end += 1
      (self.rwStatus.can_id,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rwStatus.joint = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rwStatus.joint = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rwStatus.state = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rwStatus.state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rwStatus.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rwStatus.status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rwStatus.communicationstatus = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rwStatus.communicationstatus = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rwStatus.mode_of_operation = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rwStatus.mode_of_operation = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.rwStatus.activestatusword = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.rwStatus.activestatusword.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.rwStatus.activedriveflags = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.rwStatus.activedriveflags.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.rwStatus.digitaloutputs = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.rwStatus.digitaloutputs = list(map(bool, self.rwStatus.digitaloutputs))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.rwStatus.digitalinputs = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.rwStatus.digitalinputs = list(map(bool, self.rwStatus.digitalinputs))
      start = end
      end += 4
      (self.rwStatus.current,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.rwStatus.analoginputs = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rwStatus.statusword = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rwStatus.statusword = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rwStatus.driveflags = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rwStatus.driveflags = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
