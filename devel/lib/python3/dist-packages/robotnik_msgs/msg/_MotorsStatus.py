# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robotnik_msgs/MotorsStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import robotnik_msgs.msg

class MotorsStatus(genpy.Message):
  _md5sum = "8737e2a027c7f183f76ac545960670cc"
  _type = "robotnik_msgs/MotorsStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """MotorStatus flwStatus
MotorStatus blwStatus
MotorStatus frwStatus
MotorStatus brwStatus


================================================================================
MSG: robotnik_msgs/MotorStatus
uint8 can_id
string joint
string state
string status
string communicationstatus
string mode_of_operation
string[] activestatusword
string[] activedriveflags
bool[] digitaloutputs
bool[] digitalinputs
float32 current
float32[] analoginputs
string statusword
string driveflags


"""
  __slots__ = ['flwStatus','blwStatus','frwStatus','brwStatus']
  _slot_types = ['robotnik_msgs/MotorStatus','robotnik_msgs/MotorStatus','robotnik_msgs/MotorStatus','robotnik_msgs/MotorStatus']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       flwStatus,blwStatus,frwStatus,brwStatus

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MotorsStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.flwStatus is None:
        self.flwStatus = robotnik_msgs.msg.MotorStatus()
      if self.blwStatus is None:
        self.blwStatus = robotnik_msgs.msg.MotorStatus()
      if self.frwStatus is None:
        self.frwStatus = robotnik_msgs.msg.MotorStatus()
      if self.brwStatus is None:
        self.brwStatus = robotnik_msgs.msg.MotorStatus()
    else:
      self.flwStatus = robotnik_msgs.msg.MotorStatus()
      self.blwStatus = robotnik_msgs.msg.MotorStatus()
      self.frwStatus = robotnik_msgs.msg.MotorStatus()
      self.brwStatus = robotnik_msgs.msg.MotorStatus()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.flwStatus.can_id
      buff.write(_get_struct_B().pack(_x))
      _x = self.flwStatus.joint
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.flwStatus.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.flwStatus.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.flwStatus.communicationstatus
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.flwStatus.mode_of_operation
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.flwStatus.activestatusword)
      buff.write(_struct_I.pack(length))
      for val1 in self.flwStatus.activestatusword:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.flwStatus.activedriveflags)
      buff.write(_struct_I.pack(length))
      for val1 in self.flwStatus.activedriveflags:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.flwStatus.digitaloutputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.flwStatus.digitaloutputs))
      length = len(self.flwStatus.digitalinputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.flwStatus.digitalinputs))
      _x = self.flwStatus.current
      buff.write(_get_struct_f().pack(_x))
      length = len(self.flwStatus.analoginputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.flwStatus.analoginputs))
      _x = self.flwStatus.statusword
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.flwStatus.driveflags
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.blwStatus.can_id
      buff.write(_get_struct_B().pack(_x))
      _x = self.blwStatus.joint
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.blwStatus.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.blwStatus.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.blwStatus.communicationstatus
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.blwStatus.mode_of_operation
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.blwStatus.activestatusword)
      buff.write(_struct_I.pack(length))
      for val1 in self.blwStatus.activestatusword:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.blwStatus.activedriveflags)
      buff.write(_struct_I.pack(length))
      for val1 in self.blwStatus.activedriveflags:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.blwStatus.digitaloutputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.blwStatus.digitaloutputs))
      length = len(self.blwStatus.digitalinputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.blwStatus.digitalinputs))
      _x = self.blwStatus.current
      buff.write(_get_struct_f().pack(_x))
      length = len(self.blwStatus.analoginputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.blwStatus.analoginputs))
      _x = self.blwStatus.statusword
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.blwStatus.driveflags
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.frwStatus.can_id
      buff.write(_get_struct_B().pack(_x))
      _x = self.frwStatus.joint
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.frwStatus.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.frwStatus.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.frwStatus.communicationstatus
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.frwStatus.mode_of_operation
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.frwStatus.activestatusword)
      buff.write(_struct_I.pack(length))
      for val1 in self.frwStatus.activestatusword:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.frwStatus.activedriveflags)
      buff.write(_struct_I.pack(length))
      for val1 in self.frwStatus.activedriveflags:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.frwStatus.digitaloutputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.frwStatus.digitaloutputs))
      length = len(self.frwStatus.digitalinputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.frwStatus.digitalinputs))
      _x = self.frwStatus.current
      buff.write(_get_struct_f().pack(_x))
      length = len(self.frwStatus.analoginputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.frwStatus.analoginputs))
      _x = self.frwStatus.statusword
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.frwStatus.driveflags
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.brwStatus.can_id
      buff.write(_get_struct_B().pack(_x))
      _x = self.brwStatus.joint
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.brwStatus.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.brwStatus.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.brwStatus.communicationstatus
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.brwStatus.mode_of_operation
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.brwStatus.activestatusword)
      buff.write(_struct_I.pack(length))
      for val1 in self.brwStatus.activestatusword:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.brwStatus.activedriveflags)
      buff.write(_struct_I.pack(length))
      for val1 in self.brwStatus.activedriveflags:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.brwStatus.digitaloutputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.brwStatus.digitaloutputs))
      length = len(self.brwStatus.digitalinputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.brwStatus.digitalinputs))
      _x = self.brwStatus.current
      buff.write(_get_struct_f().pack(_x))
      length = len(self.brwStatus.analoginputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.brwStatus.analoginputs))
      _x = self.brwStatus.statusword
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.brwStatus.driveflags
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.flwStatus is None:
        self.flwStatus = robotnik_msgs.msg.MotorStatus()
      if self.blwStatus is None:
        self.blwStatus = robotnik_msgs.msg.MotorStatus()
      if self.frwStatus is None:
        self.frwStatus = robotnik_msgs.msg.MotorStatus()
      if self.brwStatus is None:
        self.brwStatus = robotnik_msgs.msg.MotorStatus()
      end = 0
      start = end
      end += 1
      (self.flwStatus.can_id,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.flwStatus.joint = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.flwStatus.joint = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.flwStatus.state = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.flwStatus.state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.flwStatus.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.flwStatus.status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.flwStatus.communicationstatus = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.flwStatus.communicationstatus = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.flwStatus.mode_of_operation = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.flwStatus.mode_of_operation = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.flwStatus.activestatusword = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.flwStatus.activestatusword.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.flwStatus.activedriveflags = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.flwStatus.activedriveflags.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.flwStatus.digitaloutputs = s.unpack(str[start:end])
      self.flwStatus.digitaloutputs = list(map(bool, self.flwStatus.digitaloutputs))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.flwStatus.digitalinputs = s.unpack(str[start:end])
      self.flwStatus.digitalinputs = list(map(bool, self.flwStatus.digitalinputs))
      start = end
      end += 4
      (self.flwStatus.current,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.flwStatus.analoginputs = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.flwStatus.statusword = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.flwStatus.statusword = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.flwStatus.driveflags = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.flwStatus.driveflags = str[start:end]
      start = end
      end += 1
      (self.blwStatus.can_id,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.blwStatus.joint = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.blwStatus.joint = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.blwStatus.state = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.blwStatus.state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.blwStatus.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.blwStatus.status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.blwStatus.communicationstatus = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.blwStatus.communicationstatus = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.blwStatus.mode_of_operation = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.blwStatus.mode_of_operation = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.blwStatus.activestatusword = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.blwStatus.activestatusword.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.blwStatus.activedriveflags = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.blwStatus.activedriveflags.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.blwStatus.digitaloutputs = s.unpack(str[start:end])
      self.blwStatus.digitaloutputs = list(map(bool, self.blwStatus.digitaloutputs))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.blwStatus.digitalinputs = s.unpack(str[start:end])
      self.blwStatus.digitalinputs = list(map(bool, self.blwStatus.digitalinputs))
      start = end
      end += 4
      (self.blwStatus.current,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.blwStatus.analoginputs = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.blwStatus.statusword = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.blwStatus.statusword = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.blwStatus.driveflags = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.blwStatus.driveflags = str[start:end]
      start = end
      end += 1
      (self.frwStatus.can_id,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frwStatus.joint = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.frwStatus.joint = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frwStatus.state = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.frwStatus.state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frwStatus.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.frwStatus.status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frwStatus.communicationstatus = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.frwStatus.communicationstatus = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frwStatus.mode_of_operation = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.frwStatus.mode_of_operation = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.frwStatus.activestatusword = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.frwStatus.activestatusword.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.frwStatus.activedriveflags = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.frwStatus.activedriveflags.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.frwStatus.digitaloutputs = s.unpack(str[start:end])
      self.frwStatus.digitaloutputs = list(map(bool, self.frwStatus.digitaloutputs))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.frwStatus.digitalinputs = s.unpack(str[start:end])
      self.frwStatus.digitalinputs = list(map(bool, self.frwStatus.digitalinputs))
      start = end
      end += 4
      (self.frwStatus.current,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.frwStatus.analoginputs = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frwStatus.statusword = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.frwStatus.statusword = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frwStatus.driveflags = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.frwStatus.driveflags = str[start:end]
      start = end
      end += 1
      (self.brwStatus.can_id,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.brwStatus.joint = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.brwStatus.joint = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.brwStatus.state = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.brwStatus.state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.brwStatus.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.brwStatus.status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.brwStatus.communicationstatus = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.brwStatus.communicationstatus = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.brwStatus.mode_of_operation = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.brwStatus.mode_of_operation = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.brwStatus.activestatusword = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.brwStatus.activestatusword.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.brwStatus.activedriveflags = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.brwStatus.activedriveflags.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.brwStatus.digitaloutputs = s.unpack(str[start:end])
      self.brwStatus.digitaloutputs = list(map(bool, self.brwStatus.digitaloutputs))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.brwStatus.digitalinputs = s.unpack(str[start:end])
      self.brwStatus.digitalinputs = list(map(bool, self.brwStatus.digitalinputs))
      start = end
      end += 4
      (self.brwStatus.current,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.brwStatus.analoginputs = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.brwStatus.statusword = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.brwStatus.statusword = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.brwStatus.driveflags = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.brwStatus.driveflags = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.flwStatus.can_id
      buff.write(_get_struct_B().pack(_x))
      _x = self.flwStatus.joint
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.flwStatus.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.flwStatus.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.flwStatus.communicationstatus
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.flwStatus.mode_of_operation
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.flwStatus.activestatusword)
      buff.write(_struct_I.pack(length))
      for val1 in self.flwStatus.activestatusword:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.flwStatus.activedriveflags)
      buff.write(_struct_I.pack(length))
      for val1 in self.flwStatus.activedriveflags:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.flwStatus.digitaloutputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.flwStatus.digitaloutputs.tostring())
      length = len(self.flwStatus.digitalinputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.flwStatus.digitalinputs.tostring())
      _x = self.flwStatus.current
      buff.write(_get_struct_f().pack(_x))
      length = len(self.flwStatus.analoginputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.flwStatus.analoginputs.tostring())
      _x = self.flwStatus.statusword
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.flwStatus.driveflags
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.blwStatus.can_id
      buff.write(_get_struct_B().pack(_x))
      _x = self.blwStatus.joint
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.blwStatus.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.blwStatus.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.blwStatus.communicationstatus
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.blwStatus.mode_of_operation
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.blwStatus.activestatusword)
      buff.write(_struct_I.pack(length))
      for val1 in self.blwStatus.activestatusword:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.blwStatus.activedriveflags)
      buff.write(_struct_I.pack(length))
      for val1 in self.blwStatus.activedriveflags:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.blwStatus.digitaloutputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.blwStatus.digitaloutputs.tostring())
      length = len(self.blwStatus.digitalinputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.blwStatus.digitalinputs.tostring())
      _x = self.blwStatus.current
      buff.write(_get_struct_f().pack(_x))
      length = len(self.blwStatus.analoginputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.blwStatus.analoginputs.tostring())
      _x = self.blwStatus.statusword
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.blwStatus.driveflags
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.frwStatus.can_id
      buff.write(_get_struct_B().pack(_x))
      _x = self.frwStatus.joint
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.frwStatus.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.frwStatus.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.frwStatus.communicationstatus
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.frwStatus.mode_of_operation
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.frwStatus.activestatusword)
      buff.write(_struct_I.pack(length))
      for val1 in self.frwStatus.activestatusword:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.frwStatus.activedriveflags)
      buff.write(_struct_I.pack(length))
      for val1 in self.frwStatus.activedriveflags:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.frwStatus.digitaloutputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.frwStatus.digitaloutputs.tostring())
      length = len(self.frwStatus.digitalinputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.frwStatus.digitalinputs.tostring())
      _x = self.frwStatus.current
      buff.write(_get_struct_f().pack(_x))
      length = len(self.frwStatus.analoginputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.frwStatus.analoginputs.tostring())
      _x = self.frwStatus.statusword
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.frwStatus.driveflags
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.brwStatus.can_id
      buff.write(_get_struct_B().pack(_x))
      _x = self.brwStatus.joint
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.brwStatus.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.brwStatus.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.brwStatus.communicationstatus
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.brwStatus.mode_of_operation
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.brwStatus.activestatusword)
      buff.write(_struct_I.pack(length))
      for val1 in self.brwStatus.activestatusword:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.brwStatus.activedriveflags)
      buff.write(_struct_I.pack(length))
      for val1 in self.brwStatus.activedriveflags:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.brwStatus.digitaloutputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.brwStatus.digitaloutputs.tostring())
      length = len(self.brwStatus.digitalinputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.brwStatus.digitalinputs.tostring())
      _x = self.brwStatus.current
      buff.write(_get_struct_f().pack(_x))
      length = len(self.brwStatus.analoginputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.brwStatus.analoginputs.tostring())
      _x = self.brwStatus.statusword
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.brwStatus.driveflags
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.flwStatus is None:
        self.flwStatus = robotnik_msgs.msg.MotorStatus()
      if self.blwStatus is None:
        self.blwStatus = robotnik_msgs.msg.MotorStatus()
      if self.frwStatus is None:
        self.frwStatus = robotnik_msgs.msg.MotorStatus()
      if self.brwStatus is None:
        self.brwStatus = robotnik_msgs.msg.MotorStatus()
      end = 0
      start = end
      end += 1
      (self.flwStatus.can_id,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.flwStatus.joint = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.flwStatus.joint = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.flwStatus.state = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.flwStatus.state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.flwStatus.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.flwStatus.status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.flwStatus.communicationstatus = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.flwStatus.communicationstatus = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.flwStatus.mode_of_operation = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.flwStatus.mode_of_operation = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.flwStatus.activestatusword = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.flwStatus.activestatusword.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.flwStatus.activedriveflags = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.flwStatus.activedriveflags.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.flwStatus.digitaloutputs = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.flwStatus.digitaloutputs = list(map(bool, self.flwStatus.digitaloutputs))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.flwStatus.digitalinputs = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.flwStatus.digitalinputs = list(map(bool, self.flwStatus.digitalinputs))
      start = end
      end += 4
      (self.flwStatus.current,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.flwStatus.analoginputs = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.flwStatus.statusword = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.flwStatus.statusword = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.flwStatus.driveflags = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.flwStatus.driveflags = str[start:end]
      start = end
      end += 1
      (self.blwStatus.can_id,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.blwStatus.joint = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.blwStatus.joint = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.blwStatus.state = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.blwStatus.state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.blwStatus.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.blwStatus.status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.blwStatus.communicationstatus = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.blwStatus.communicationstatus = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.blwStatus.mode_of_operation = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.blwStatus.mode_of_operation = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.blwStatus.activestatusword = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.blwStatus.activestatusword.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.blwStatus.activedriveflags = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.blwStatus.activedriveflags.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.blwStatus.digitaloutputs = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.blwStatus.digitaloutputs = list(map(bool, self.blwStatus.digitaloutputs))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.blwStatus.digitalinputs = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.blwStatus.digitalinputs = list(map(bool, self.blwStatus.digitalinputs))
      start = end
      end += 4
      (self.blwStatus.current,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.blwStatus.analoginputs = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.blwStatus.statusword = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.blwStatus.statusword = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.blwStatus.driveflags = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.blwStatus.driveflags = str[start:end]
      start = end
      end += 1
      (self.frwStatus.can_id,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frwStatus.joint = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.frwStatus.joint = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frwStatus.state = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.frwStatus.state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frwStatus.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.frwStatus.status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frwStatus.communicationstatus = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.frwStatus.communicationstatus = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frwStatus.mode_of_operation = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.frwStatus.mode_of_operation = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.frwStatus.activestatusword = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.frwStatus.activestatusword.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.frwStatus.activedriveflags = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.frwStatus.activedriveflags.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.frwStatus.digitaloutputs = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.frwStatus.digitaloutputs = list(map(bool, self.frwStatus.digitaloutputs))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.frwStatus.digitalinputs = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.frwStatus.digitalinputs = list(map(bool, self.frwStatus.digitalinputs))
      start = end
      end += 4
      (self.frwStatus.current,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.frwStatus.analoginputs = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frwStatus.statusword = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.frwStatus.statusword = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frwStatus.driveflags = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.frwStatus.driveflags = str[start:end]
      start = end
      end += 1
      (self.brwStatus.can_id,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.brwStatus.joint = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.brwStatus.joint = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.brwStatus.state = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.brwStatus.state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.brwStatus.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.brwStatus.status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.brwStatus.communicationstatus = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.brwStatus.communicationstatus = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.brwStatus.mode_of_operation = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.brwStatus.mode_of_operation = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.brwStatus.activestatusword = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.brwStatus.activestatusword.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.brwStatus.activedriveflags = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.brwStatus.activedriveflags.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.brwStatus.digitaloutputs = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.brwStatus.digitaloutputs = list(map(bool, self.brwStatus.digitaloutputs))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.brwStatus.digitalinputs = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.brwStatus.digitalinputs = list(map(bool, self.brwStatus.digitalinputs))
      start = end
      end += 4
      (self.brwStatus.current,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.brwStatus.analoginputs = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.brwStatus.statusword = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.brwStatus.statusword = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.brwStatus.driveflags = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.brwStatus.driveflags = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
