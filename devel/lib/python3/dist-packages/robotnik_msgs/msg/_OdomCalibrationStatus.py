# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robotnik_msgs/OdomCalibrationStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class OdomCalibrationStatus(genpy.Message):
  _md5sum = "d03e7379e89cf43254443e594855bbde"
  _type = "robotnik_msgs/OdomCalibrationStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool is_calculating             # true when node is calculating the odometry parameters
float32 remaining_time          # remaining time in seconds for obtaining odometry values

float32 left_radius             # radius of the left wheel in meters
float32 right_radius            # radius of the right wheel in meters
float32 wheels_distance         # distance between the two wheels of the robot in meters"""
  __slots__ = ['is_calculating','remaining_time','left_radius','right_radius','wheels_distance']
  _slot_types = ['bool','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       is_calculating,remaining_time,left_radius,right_radius,wheels_distance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(OdomCalibrationStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.is_calculating is None:
        self.is_calculating = False
      if self.remaining_time is None:
        self.remaining_time = 0.
      if self.left_radius is None:
        self.left_radius = 0.
      if self.right_radius is None:
        self.right_radius = 0.
      if self.wheels_distance is None:
        self.wheels_distance = 0.
    else:
      self.is_calculating = False
      self.remaining_time = 0.
      self.left_radius = 0.
      self.right_radius = 0.
      self.wheels_distance = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B4f().pack(_x.is_calculating, _x.remaining_time, _x.left_radius, _x.right_radius, _x.wheels_distance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 17
      (_x.is_calculating, _x.remaining_time, _x.left_radius, _x.right_radius, _x.wheels_distance,) = _get_struct_B4f().unpack(str[start:end])
      self.is_calculating = bool(self.is_calculating)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B4f().pack(_x.is_calculating, _x.remaining_time, _x.left_radius, _x.right_radius, _x.wheels_distance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 17
      (_x.is_calculating, _x.remaining_time, _x.left_radius, _x.right_radius, _x.wheels_distance,) = _get_struct_B4f().unpack(str[start:end])
      self.is_calculating = bool(self.is_calculating)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B4f = None
def _get_struct_B4f():
    global _struct_B4f
    if _struct_B4f is None:
        _struct_B4f = struct.Struct("<B4f")
    return _struct_B4f
