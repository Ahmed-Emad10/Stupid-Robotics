// Generated by gencpp from file robotnik_msgs/MotorsStatus.msg
// DO NOT EDIT!


#ifndef ROBOTNIK_MSGS_MESSAGE_MOTORSSTATUS_H
#define ROBOTNIK_MSGS_MESSAGE_MOTORSSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robotnik_msgs/MotorStatus.h>
#include <robotnik_msgs/MotorStatus.h>
#include <robotnik_msgs/MotorStatus.h>
#include <robotnik_msgs/MotorStatus.h>

namespace robotnik_msgs
{
template <class ContainerAllocator>
struct MotorsStatus_
{
  typedef MotorsStatus_<ContainerAllocator> Type;

  MotorsStatus_()
    : flwStatus()
    , blwStatus()
    , frwStatus()
    , brwStatus()  {
    }
  MotorsStatus_(const ContainerAllocator& _alloc)
    : flwStatus(_alloc)
    , blwStatus(_alloc)
    , frwStatus(_alloc)
    , brwStatus(_alloc)  {
  (void)_alloc;
    }



   typedef  ::robotnik_msgs::MotorStatus_<ContainerAllocator>  _flwStatus_type;
  _flwStatus_type flwStatus;

   typedef  ::robotnik_msgs::MotorStatus_<ContainerAllocator>  _blwStatus_type;
  _blwStatus_type blwStatus;

   typedef  ::robotnik_msgs::MotorStatus_<ContainerAllocator>  _frwStatus_type;
  _frwStatus_type frwStatus;

   typedef  ::robotnik_msgs::MotorStatus_<ContainerAllocator>  _brwStatus_type;
  _brwStatus_type brwStatus;





  typedef boost::shared_ptr< ::robotnik_msgs::MotorsStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotnik_msgs::MotorsStatus_<ContainerAllocator> const> ConstPtr;

}; // struct MotorsStatus_

typedef ::robotnik_msgs::MotorsStatus_<std::allocator<void> > MotorsStatus;

typedef boost::shared_ptr< ::robotnik_msgs::MotorsStatus > MotorsStatusPtr;
typedef boost::shared_ptr< ::robotnik_msgs::MotorsStatus const> MotorsStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotnik_msgs::MotorsStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotnik_msgs::MotorsStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robotnik_msgs::MotorsStatus_<ContainerAllocator1> & lhs, const ::robotnik_msgs::MotorsStatus_<ContainerAllocator2> & rhs)
{
  return lhs.flwStatus == rhs.flwStatus &&
    lhs.blwStatus == rhs.blwStatus &&
    lhs.frwStatus == rhs.frwStatus &&
    lhs.brwStatus == rhs.brwStatus;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robotnik_msgs::MotorsStatus_<ContainerAllocator1> & lhs, const ::robotnik_msgs::MotorsStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robotnik_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robotnik_msgs::MotorsStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_msgs::MotorsStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_msgs::MotorsStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_msgs::MotorsStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_msgs::MotorsStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_msgs::MotorsStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotnik_msgs::MotorsStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8737e2a027c7f183f76ac545960670cc";
  }

  static const char* value(const ::robotnik_msgs::MotorsStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8737e2a027c7f183ULL;
  static const uint64_t static_value2 = 0xf76ac545960670ccULL;
};

template<class ContainerAllocator>
struct DataType< ::robotnik_msgs::MotorsStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotnik_msgs/MotorsStatus";
  }

  static const char* value(const ::robotnik_msgs::MotorsStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotnik_msgs::MotorsStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "MotorStatus flwStatus\n"
"MotorStatus blwStatus\n"
"MotorStatus frwStatus\n"
"MotorStatus brwStatus\n"
"\n"
"\n"
"================================================================================\n"
"MSG: robotnik_msgs/MotorStatus\n"
"uint8 can_id\n"
"string joint\n"
"string state\n"
"string status\n"
"string communicationstatus\n"
"string mode_of_operation\n"
"string[] activestatusword\n"
"string[] activedriveflags\n"
"bool[] digitaloutputs\n"
"bool[] digitalinputs\n"
"float32 current\n"
"float32[] analoginputs\n"
"string statusword\n"
"string driveflags\n"
"\n"
"\n"
;
  }

  static const char* value(const ::robotnik_msgs::MotorsStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotnik_msgs::MotorsStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.flwStatus);
      stream.next(m.blwStatus);
      stream.next(m.frwStatus);
      stream.next(m.brwStatus);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorsStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotnik_msgs::MotorsStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotnik_msgs::MotorsStatus_<ContainerAllocator>& v)
  {
    s << indent << "flwStatus: ";
    s << std::endl;
    Printer< ::robotnik_msgs::MotorStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.flwStatus);
    s << indent << "blwStatus: ";
    s << std::endl;
    Printer< ::robotnik_msgs::MotorStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.blwStatus);
    s << indent << "frwStatus: ";
    s << std::endl;
    Printer< ::robotnik_msgs::MotorStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.frwStatus);
    s << indent << "brwStatus: ";
    s << std::endl;
    Printer< ::robotnik_msgs::MotorStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.brwStatus);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTNIK_MSGS_MESSAGE_MOTORSSTATUS_H
