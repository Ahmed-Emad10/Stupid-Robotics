// Generated by gencpp from file robotnik_msgs/axis_recordRequest.msg
// DO NOT EDIT!


#ifndef ROBOTNIK_MSGS_MESSAGE_AXIS_RECORDREQUEST_H
#define ROBOTNIK_MSGS_MESSAGE_AXIS_RECORDREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robotnik_msgs
{
template <class ContainerAllocator>
struct axis_recordRequest_
{
  typedef axis_recordRequest_<ContainerAllocator> Type;

  axis_recordRequest_()
    : action(0)
    , directory()
    , profile()
    , id()  {
    }
  axis_recordRequest_(const ContainerAllocator& _alloc)
    : action(0)
    , directory(_alloc)
    , profile(_alloc)
    , id(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _action_type;
  _action_type action;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _directory_type;
  _directory_type directory;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _profile_type;
  _profile_type profile;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _id_type;
  _id_type id;





  typedef boost::shared_ptr< ::robotnik_msgs::axis_recordRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotnik_msgs::axis_recordRequest_<ContainerAllocator> const> ConstPtr;

}; // struct axis_recordRequest_

typedef ::robotnik_msgs::axis_recordRequest_<std::allocator<void> > axis_recordRequest;

typedef boost::shared_ptr< ::robotnik_msgs::axis_recordRequest > axis_recordRequestPtr;
typedef boost::shared_ptr< ::robotnik_msgs::axis_recordRequest const> axis_recordRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotnik_msgs::axis_recordRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotnik_msgs::axis_recordRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robotnik_msgs::axis_recordRequest_<ContainerAllocator1> & lhs, const ::robotnik_msgs::axis_recordRequest_<ContainerAllocator2> & rhs)
{
  return lhs.action == rhs.action &&
    lhs.directory == rhs.directory &&
    lhs.profile == rhs.profile &&
    lhs.id == rhs.id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robotnik_msgs::axis_recordRequest_<ContainerAllocator1> & lhs, const ::robotnik_msgs::axis_recordRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robotnik_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robotnik_msgs::axis_recordRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_msgs::axis_recordRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_msgs::axis_recordRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_msgs::axis_recordRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_msgs::axis_recordRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_msgs::axis_recordRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotnik_msgs::axis_recordRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "39a90fb80eeb30fd1922ed05ed1384be";
  }

  static const char* value(const ::robotnik_msgs::axis_recordRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x39a90fb80eeb30fdULL;
  static const uint64_t static_value2 = 0x1922ed05ed1384beULL;
};

template<class ContainerAllocator>
struct DataType< ::robotnik_msgs::axis_recordRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotnik_msgs/axis_recordRequest";
  }

  static const char* value(const ::robotnik_msgs::axis_recordRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotnik_msgs::axis_recordRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# \n"
"# RECORD = 1, STOP = 2\n"
"int8 action\n"
"# DIRECTORY TO SAVE THE VIDEO\n"
"string directory\n"
"# PROFILE TO USE DURING THE RECORDING\n"
"string profile\n"
"# id / name of the recording\n"
"string id\n"
;
  }

  static const char* value(const ::robotnik_msgs::axis_recordRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotnik_msgs::axis_recordRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action);
      stream.next(m.directory);
      stream.next(m.profile);
      stream.next(m.id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct axis_recordRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotnik_msgs::axis_recordRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotnik_msgs::axis_recordRequest_<ContainerAllocator>& v)
  {
    s << indent << "action: ";
    Printer<int8_t>::stream(s, indent + "  ", v.action);
    s << indent << "directory: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.directory);
    s << indent << "profile: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.profile);
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTNIK_MSGS_MESSAGE_AXIS_RECORDREQUEST_H
