// Generated by gencpp from file robotnik_msgs/OdomCalibrationStatus.msg
// DO NOT EDIT!


#ifndef ROBOTNIK_MSGS_MESSAGE_ODOMCALIBRATIONSTATUS_H
#define ROBOTNIK_MSGS_MESSAGE_ODOMCALIBRATIONSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robotnik_msgs
{
template <class ContainerAllocator>
struct OdomCalibrationStatus_
{
  typedef OdomCalibrationStatus_<ContainerAllocator> Type;

  OdomCalibrationStatus_()
    : is_calculating(false)
    , remaining_time(0.0)
    , left_radius(0.0)
    , right_radius(0.0)
    , wheels_distance(0.0)  {
    }
  OdomCalibrationStatus_(const ContainerAllocator& _alloc)
    : is_calculating(false)
    , remaining_time(0.0)
    , left_radius(0.0)
    , right_radius(0.0)
    , wheels_distance(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _is_calculating_type;
  _is_calculating_type is_calculating;

   typedef float _remaining_time_type;
  _remaining_time_type remaining_time;

   typedef float _left_radius_type;
  _left_radius_type left_radius;

   typedef float _right_radius_type;
  _right_radius_type right_radius;

   typedef float _wheels_distance_type;
  _wheels_distance_type wheels_distance;





  typedef boost::shared_ptr< ::robotnik_msgs::OdomCalibrationStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotnik_msgs::OdomCalibrationStatus_<ContainerAllocator> const> ConstPtr;

}; // struct OdomCalibrationStatus_

typedef ::robotnik_msgs::OdomCalibrationStatus_<std::allocator<void> > OdomCalibrationStatus;

typedef boost::shared_ptr< ::robotnik_msgs::OdomCalibrationStatus > OdomCalibrationStatusPtr;
typedef boost::shared_ptr< ::robotnik_msgs::OdomCalibrationStatus const> OdomCalibrationStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotnik_msgs::OdomCalibrationStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotnik_msgs::OdomCalibrationStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robotnik_msgs::OdomCalibrationStatus_<ContainerAllocator1> & lhs, const ::robotnik_msgs::OdomCalibrationStatus_<ContainerAllocator2> & rhs)
{
  return lhs.is_calculating == rhs.is_calculating &&
    lhs.remaining_time == rhs.remaining_time &&
    lhs.left_radius == rhs.left_radius &&
    lhs.right_radius == rhs.right_radius &&
    lhs.wheels_distance == rhs.wheels_distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robotnik_msgs::OdomCalibrationStatus_<ContainerAllocator1> & lhs, const ::robotnik_msgs::OdomCalibrationStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robotnik_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robotnik_msgs::OdomCalibrationStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_msgs::OdomCalibrationStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_msgs::OdomCalibrationStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_msgs::OdomCalibrationStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_msgs::OdomCalibrationStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_msgs::OdomCalibrationStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotnik_msgs::OdomCalibrationStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d03e7379e89cf43254443e594855bbde";
  }

  static const char* value(const ::robotnik_msgs::OdomCalibrationStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd03e7379e89cf432ULL;
  static const uint64_t static_value2 = 0x54443e594855bbdeULL;
};

template<class ContainerAllocator>
struct DataType< ::robotnik_msgs::OdomCalibrationStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotnik_msgs/OdomCalibrationStatus";
  }

  static const char* value(const ::robotnik_msgs::OdomCalibrationStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotnik_msgs::OdomCalibrationStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool is_calculating             # true when node is calculating the odometry parameters\n"
"float32 remaining_time          # remaining time in seconds for obtaining odometry values\n"
"\n"
"float32 left_radius             # radius of the left wheel in meters\n"
"float32 right_radius            # radius of the right wheel in meters\n"
"float32 wheels_distance         # distance between the two wheels of the robot in meters\n"
;
  }

  static const char* value(const ::robotnik_msgs::OdomCalibrationStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotnik_msgs::OdomCalibrationStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.is_calculating);
      stream.next(m.remaining_time);
      stream.next(m.left_radius);
      stream.next(m.right_radius);
      stream.next(m.wheels_distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OdomCalibrationStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotnik_msgs::OdomCalibrationStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotnik_msgs::OdomCalibrationStatus_<ContainerAllocator>& v)
  {
    s << indent << "is_calculating: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_calculating);
    s << indent << "remaining_time: ";
    Printer<float>::stream(s, indent + "  ", v.remaining_time);
    s << indent << "left_radius: ";
    Printer<float>::stream(s, indent + "  ", v.left_radius);
    s << indent << "right_radius: ";
    Printer<float>::stream(s, indent + "  ", v.right_radius);
    s << indent << "wheels_distance: ";
    Printer<float>::stream(s, indent + "  ", v.wheels_distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTNIK_MSGS_MESSAGE_ODOMCALIBRATIONSTATUS_H
