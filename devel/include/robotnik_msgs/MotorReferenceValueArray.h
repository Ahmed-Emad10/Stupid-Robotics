// Generated by gencpp from file robotnik_msgs/MotorReferenceValueArray.msg
// DO NOT EDIT!


#ifndef ROBOTNIK_MSGS_MESSAGE_MOTORREFERENCEVALUEARRAY_H
#define ROBOTNIK_MSGS_MESSAGE_MOTORREFERENCEVALUEARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robotnik_msgs/MotorReferenceValue.h>
#include <robotnik_msgs/MotorReferenceValue.h>
#include <robotnik_msgs/MotorReferenceValue.h>

namespace robotnik_msgs
{
template <class ContainerAllocator>
struct MotorReferenceValueArray_
{
  typedef MotorReferenceValueArray_<ContainerAllocator> Type;

  MotorReferenceValueArray_()
    : velocity()
    , position()
    , torque()  {
    }
  MotorReferenceValueArray_(const ContainerAllocator& _alloc)
    : velocity(_alloc)
    , position(_alloc)
    , torque(_alloc)  {
  (void)_alloc;
    }



   typedef  ::robotnik_msgs::MotorReferenceValue_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef  ::robotnik_msgs::MotorReferenceValue_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::robotnik_msgs::MotorReferenceValue_<ContainerAllocator>  _torque_type;
  _torque_type torque;





  typedef boost::shared_ptr< ::robotnik_msgs::MotorReferenceValueArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotnik_msgs::MotorReferenceValueArray_<ContainerAllocator> const> ConstPtr;

}; // struct MotorReferenceValueArray_

typedef ::robotnik_msgs::MotorReferenceValueArray_<std::allocator<void> > MotorReferenceValueArray;

typedef boost::shared_ptr< ::robotnik_msgs::MotorReferenceValueArray > MotorReferenceValueArrayPtr;
typedef boost::shared_ptr< ::robotnik_msgs::MotorReferenceValueArray const> MotorReferenceValueArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotnik_msgs::MotorReferenceValueArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotnik_msgs::MotorReferenceValueArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robotnik_msgs::MotorReferenceValueArray_<ContainerAllocator1> & lhs, const ::robotnik_msgs::MotorReferenceValueArray_<ContainerAllocator2> & rhs)
{
  return lhs.velocity == rhs.velocity &&
    lhs.position == rhs.position &&
    lhs.torque == rhs.torque;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robotnik_msgs::MotorReferenceValueArray_<ContainerAllocator1> & lhs, const ::robotnik_msgs::MotorReferenceValueArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robotnik_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robotnik_msgs::MotorReferenceValueArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_msgs::MotorReferenceValueArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_msgs::MotorReferenceValueArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_msgs::MotorReferenceValueArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_msgs::MotorReferenceValueArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_msgs::MotorReferenceValueArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotnik_msgs::MotorReferenceValueArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8397e49dd79671c43ebd06b3be44fa96";
  }

  static const char* value(const ::robotnik_msgs::MotorReferenceValueArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8397e49dd79671c4ULL;
  static const uint64_t static_value2 = 0x3ebd06b3be44fa96ULL;
};

template<class ContainerAllocator>
struct DataType< ::robotnik_msgs::MotorReferenceValueArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotnik_msgs/MotorReferenceValueArray";
  }

  static const char* value(const ::robotnik_msgs::MotorReferenceValueArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotnik_msgs::MotorReferenceValueArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "MotorReferenceValue velocity\n"
"MotorReferenceValue position\n"
"MotorReferenceValue torque\n"
"\n"
"================================================================================\n"
"MSG: robotnik_msgs/MotorReferenceValue\n"
"float32 target_value\n"
"int32 target_ref\n"
"float32 actual_value\n"
"int32 actual_ref\n"
;
  }

  static const char* value(const ::robotnik_msgs::MotorReferenceValueArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotnik_msgs::MotorReferenceValueArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.velocity);
      stream.next(m.position);
      stream.next(m.torque);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorReferenceValueArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotnik_msgs::MotorReferenceValueArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotnik_msgs::MotorReferenceValueArray_<ContainerAllocator>& v)
  {
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::robotnik_msgs::MotorReferenceValue_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::robotnik_msgs::MotorReferenceValue_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "torque: ";
    s << std::endl;
    Printer< ::robotnik_msgs::MotorReferenceValue_<ContainerAllocator> >::stream(s, indent + "  ", v.torque);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTNIK_MSGS_MESSAGE_MOTORREFERENCEVALUEARRAY_H
