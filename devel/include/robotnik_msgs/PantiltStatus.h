// Generated by gencpp from file robotnik_msgs/PantiltStatus.msg
// DO NOT EDIT!


#ifndef ROBOTNIK_MSGS_MESSAGE_PANTILTSTATUS_H
#define ROBOTNIK_MSGS_MESSAGE_PANTILTSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robotnik_msgs
{
template <class ContainerAllocator>
struct PantiltStatus_
{
  typedef PantiltStatus_<ContainerAllocator> Type;

  PantiltStatus_()
    : pan_pos(0.0)
    , tilt_pos(0.0)
    , pan_speed(0.0)
    , tilt_speed(0.0)  {
    }
  PantiltStatus_(const ContainerAllocator& _alloc)
    : pan_pos(0.0)
    , tilt_pos(0.0)
    , pan_speed(0.0)
    , tilt_speed(0.0)  {
  (void)_alloc;
    }



   typedef float _pan_pos_type;
  _pan_pos_type pan_pos;

   typedef float _tilt_pos_type;
  _tilt_pos_type tilt_pos;

   typedef float _pan_speed_type;
  _pan_speed_type pan_speed;

   typedef float _tilt_speed_type;
  _tilt_speed_type tilt_speed;





  typedef boost::shared_ptr< ::robotnik_msgs::PantiltStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotnik_msgs::PantiltStatus_<ContainerAllocator> const> ConstPtr;

}; // struct PantiltStatus_

typedef ::robotnik_msgs::PantiltStatus_<std::allocator<void> > PantiltStatus;

typedef boost::shared_ptr< ::robotnik_msgs::PantiltStatus > PantiltStatusPtr;
typedef boost::shared_ptr< ::robotnik_msgs::PantiltStatus const> PantiltStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotnik_msgs::PantiltStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotnik_msgs::PantiltStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robotnik_msgs::PantiltStatus_<ContainerAllocator1> & lhs, const ::robotnik_msgs::PantiltStatus_<ContainerAllocator2> & rhs)
{
  return lhs.pan_pos == rhs.pan_pos &&
    lhs.tilt_pos == rhs.tilt_pos &&
    lhs.pan_speed == rhs.pan_speed &&
    lhs.tilt_speed == rhs.tilt_speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robotnik_msgs::PantiltStatus_<ContainerAllocator1> & lhs, const ::robotnik_msgs::PantiltStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robotnik_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robotnik_msgs::PantiltStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_msgs::PantiltStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_msgs::PantiltStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_msgs::PantiltStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_msgs::PantiltStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_msgs::PantiltStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotnik_msgs::PantiltStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b9addaf9ff55168a01a8a6a9e689829f";
  }

  static const char* value(const ::robotnik_msgs::PantiltStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb9addaf9ff55168aULL;
  static const uint64_t static_value2 = 0x01a8a6a9e689829fULL;
};

template<class ContainerAllocator>
struct DataType< ::robotnik_msgs::PantiltStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotnik_msgs/PantiltStatus";
  }

  static const char* value(const ::robotnik_msgs::PantiltStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotnik_msgs::PantiltStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 pan_pos\n"
"float32 tilt_pos\n"
"float32 pan_speed\n"
"float32 tilt_speed\n"
;
  }

  static const char* value(const ::robotnik_msgs::PantiltStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotnik_msgs::PantiltStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pan_pos);
      stream.next(m.tilt_pos);
      stream.next(m.pan_speed);
      stream.next(m.tilt_speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PantiltStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotnik_msgs::PantiltStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotnik_msgs::PantiltStatus_<ContainerAllocator>& v)
  {
    s << indent << "pan_pos: ";
    Printer<float>::stream(s, indent + "  ", v.pan_pos);
    s << indent << "tilt_pos: ";
    Printer<float>::stream(s, indent + "  ", v.tilt_pos);
    s << indent << "pan_speed: ";
    Printer<float>::stream(s, indent + "  ", v.pan_speed);
    s << indent << "tilt_speed: ";
    Printer<float>::stream(s, indent + "  ", v.tilt_speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTNIK_MSGS_MESSAGE_PANTILTSTATUS_H
