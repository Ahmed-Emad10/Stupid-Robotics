// Generated by gencpp from file robotnik_msgs/alarmsmonitor.msg
// DO NOT EDIT!


#ifndef ROBOTNIK_MSGS_MESSAGE_ALARMSMONITOR_H
#define ROBOTNIK_MSGS_MESSAGE_ALARMSMONITOR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robotnik_msgs/alarmmonitor.h>

namespace robotnik_msgs
{
template <class ContainerAllocator>
struct alarmsmonitor_
{
  typedef alarmsmonitor_<ContainerAllocator> Type;

  alarmsmonitor_()
    : alarms()  {
    }
  alarmsmonitor_(const ContainerAllocator& _alloc)
    : alarms(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::robotnik_msgs::alarmmonitor_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::robotnik_msgs::alarmmonitor_<ContainerAllocator> >> _alarms_type;
  _alarms_type alarms;





  typedef boost::shared_ptr< ::robotnik_msgs::alarmsmonitor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotnik_msgs::alarmsmonitor_<ContainerAllocator> const> ConstPtr;

}; // struct alarmsmonitor_

typedef ::robotnik_msgs::alarmsmonitor_<std::allocator<void> > alarmsmonitor;

typedef boost::shared_ptr< ::robotnik_msgs::alarmsmonitor > alarmsmonitorPtr;
typedef boost::shared_ptr< ::robotnik_msgs::alarmsmonitor const> alarmsmonitorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotnik_msgs::alarmsmonitor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotnik_msgs::alarmsmonitor_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robotnik_msgs::alarmsmonitor_<ContainerAllocator1> & lhs, const ::robotnik_msgs::alarmsmonitor_<ContainerAllocator2> & rhs)
{
  return lhs.alarms == rhs.alarms;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robotnik_msgs::alarmsmonitor_<ContainerAllocator1> & lhs, const ::robotnik_msgs::alarmsmonitor_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robotnik_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robotnik_msgs::alarmsmonitor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_msgs::alarmsmonitor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_msgs::alarmsmonitor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_msgs::alarmsmonitor_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_msgs::alarmsmonitor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_msgs::alarmsmonitor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotnik_msgs::alarmsmonitor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e686c3a2b0932118650b57e91f9eee9a";
  }

  static const char* value(const ::robotnik_msgs::alarmsmonitor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe686c3a2b0932118ULL;
  static const uint64_t static_value2 = 0x650b57e91f9eee9aULL;
};

template<class ContainerAllocator>
struct DataType< ::robotnik_msgs::alarmsmonitor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotnik_msgs/alarmsmonitor";
  }

  static const char* value(const ::robotnik_msgs::alarmsmonitor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotnik_msgs::alarmsmonitor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "alarmmonitor[] alarms\n"
"\n"
"================================================================================\n"
"MSG: robotnik_msgs/alarmmonitor\n"
"# type: error, warning, event\n"
"string type\n"
"# displaing number for monitoring\n"
"int32 display\n"
"# component\n"
"string component\n"
"# To be shown in HMI\n"
"bool hmi\n"
"# group: alarm group all alarms of same group will be reset at same time\n"
"string group\n"
"# text: more explained information about alarm, should include group, time, conditions, etc\n"
"string text\n"
"# seconds active\n"
"uint64 seconds_active\n"
;
  }

  static const char* value(const ::robotnik_msgs::alarmsmonitor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotnik_msgs::alarmsmonitor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.alarms);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct alarmsmonitor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotnik_msgs::alarmsmonitor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotnik_msgs::alarmsmonitor_<ContainerAllocator>& v)
  {
    s << indent << "alarms[]" << std::endl;
    for (size_t i = 0; i < v.alarms.size(); ++i)
    {
      s << indent << "  alarms[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::robotnik_msgs::alarmmonitor_<ContainerAllocator> >::stream(s, indent + "    ", v.alarms[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTNIK_MSGS_MESSAGE_ALARMSMONITOR_H
