// Generated by gencpp from file robotnik_msgs/MotorsStatusDifferential.msg
// DO NOT EDIT!


#ifndef ROBOTNIK_MSGS_MESSAGE_MOTORSSTATUSDIFFERENTIAL_H
#define ROBOTNIK_MSGS_MESSAGE_MOTORSSTATUSDIFFERENTIAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robotnik_msgs/MotorStatus.h>
#include <robotnik_msgs/MotorStatus.h>

namespace robotnik_msgs
{
template <class ContainerAllocator>
struct MotorsStatusDifferential_
{
  typedef MotorsStatusDifferential_<ContainerAllocator> Type;

  MotorsStatusDifferential_()
    : lwStatus()
    , rwStatus()  {
    }
  MotorsStatusDifferential_(const ContainerAllocator& _alloc)
    : lwStatus(_alloc)
    , rwStatus(_alloc)  {
  (void)_alloc;
    }



   typedef  ::robotnik_msgs::MotorStatus_<ContainerAllocator>  _lwStatus_type;
  _lwStatus_type lwStatus;

   typedef  ::robotnik_msgs::MotorStatus_<ContainerAllocator>  _rwStatus_type;
  _rwStatus_type rwStatus;





  typedef boost::shared_ptr< ::robotnik_msgs::MotorsStatusDifferential_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotnik_msgs::MotorsStatusDifferential_<ContainerAllocator> const> ConstPtr;

}; // struct MotorsStatusDifferential_

typedef ::robotnik_msgs::MotorsStatusDifferential_<std::allocator<void> > MotorsStatusDifferential;

typedef boost::shared_ptr< ::robotnik_msgs::MotorsStatusDifferential > MotorsStatusDifferentialPtr;
typedef boost::shared_ptr< ::robotnik_msgs::MotorsStatusDifferential const> MotorsStatusDifferentialConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotnik_msgs::MotorsStatusDifferential_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotnik_msgs::MotorsStatusDifferential_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robotnik_msgs::MotorsStatusDifferential_<ContainerAllocator1> & lhs, const ::robotnik_msgs::MotorsStatusDifferential_<ContainerAllocator2> & rhs)
{
  return lhs.lwStatus == rhs.lwStatus &&
    lhs.rwStatus == rhs.rwStatus;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robotnik_msgs::MotorsStatusDifferential_<ContainerAllocator1> & lhs, const ::robotnik_msgs::MotorsStatusDifferential_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robotnik_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robotnik_msgs::MotorsStatusDifferential_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_msgs::MotorsStatusDifferential_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_msgs::MotorsStatusDifferential_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_msgs::MotorsStatusDifferential_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_msgs::MotorsStatusDifferential_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_msgs::MotorsStatusDifferential_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotnik_msgs::MotorsStatusDifferential_<ContainerAllocator> >
{
  static const char* value()
  {
    return "54c939ea4e1227a032aeca24b67584ad";
  }

  static const char* value(const ::robotnik_msgs::MotorsStatusDifferential_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x54c939ea4e1227a0ULL;
  static const uint64_t static_value2 = 0x32aeca24b67584adULL;
};

template<class ContainerAllocator>
struct DataType< ::robotnik_msgs::MotorsStatusDifferential_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotnik_msgs/MotorsStatusDifferential";
  }

  static const char* value(const ::robotnik_msgs::MotorsStatusDifferential_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotnik_msgs::MotorsStatusDifferential_<ContainerAllocator> >
{
  static const char* value()
  {
    return "MotorStatus lwStatus\n"
"MotorStatus rwStatus\n"
"\n"
"\n"
"================================================================================\n"
"MSG: robotnik_msgs/MotorStatus\n"
"uint8 can_id\n"
"string joint\n"
"string state\n"
"string status\n"
"string communicationstatus\n"
"string mode_of_operation\n"
"string[] activestatusword\n"
"string[] activedriveflags\n"
"bool[] digitaloutputs\n"
"bool[] digitalinputs\n"
"float32 current\n"
"float32[] analoginputs\n"
"string statusword\n"
"string driveflags\n"
"\n"
"\n"
;
  }

  static const char* value(const ::robotnik_msgs::MotorsStatusDifferential_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotnik_msgs::MotorsStatusDifferential_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lwStatus);
      stream.next(m.rwStatus);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorsStatusDifferential_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotnik_msgs::MotorsStatusDifferential_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotnik_msgs::MotorsStatusDifferential_<ContainerAllocator>& v)
  {
    s << indent << "lwStatus: ";
    s << std::endl;
    Printer< ::robotnik_msgs::MotorStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.lwStatus);
    s << indent << "rwStatus: ";
    s << std::endl;
    Printer< ::robotnik_msgs::MotorStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.rwStatus);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTNIK_MSGS_MESSAGE_MOTORSSTATUSDIFFERENTIAL_H
