// Generated by gencpp from file robotnik_msgs/MotorReferenceValue.msg
// DO NOT EDIT!


#ifndef ROBOTNIK_MSGS_MESSAGE_MOTORREFERENCEVALUE_H
#define ROBOTNIK_MSGS_MESSAGE_MOTORREFERENCEVALUE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robotnik_msgs
{
template <class ContainerAllocator>
struct MotorReferenceValue_
{
  typedef MotorReferenceValue_<ContainerAllocator> Type;

  MotorReferenceValue_()
    : target_value(0.0)
    , target_ref(0)
    , actual_value(0.0)
    , actual_ref(0)  {
    }
  MotorReferenceValue_(const ContainerAllocator& _alloc)
    : target_value(0.0)
    , target_ref(0)
    , actual_value(0.0)
    , actual_ref(0)  {
  (void)_alloc;
    }



   typedef float _target_value_type;
  _target_value_type target_value;

   typedef int32_t _target_ref_type;
  _target_ref_type target_ref;

   typedef float _actual_value_type;
  _actual_value_type actual_value;

   typedef int32_t _actual_ref_type;
  _actual_ref_type actual_ref;





  typedef boost::shared_ptr< ::robotnik_msgs::MotorReferenceValue_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotnik_msgs::MotorReferenceValue_<ContainerAllocator> const> ConstPtr;

}; // struct MotorReferenceValue_

typedef ::robotnik_msgs::MotorReferenceValue_<std::allocator<void> > MotorReferenceValue;

typedef boost::shared_ptr< ::robotnik_msgs::MotorReferenceValue > MotorReferenceValuePtr;
typedef boost::shared_ptr< ::robotnik_msgs::MotorReferenceValue const> MotorReferenceValueConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotnik_msgs::MotorReferenceValue_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotnik_msgs::MotorReferenceValue_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robotnik_msgs::MotorReferenceValue_<ContainerAllocator1> & lhs, const ::robotnik_msgs::MotorReferenceValue_<ContainerAllocator2> & rhs)
{
  return lhs.target_value == rhs.target_value &&
    lhs.target_ref == rhs.target_ref &&
    lhs.actual_value == rhs.actual_value &&
    lhs.actual_ref == rhs.actual_ref;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robotnik_msgs::MotorReferenceValue_<ContainerAllocator1> & lhs, const ::robotnik_msgs::MotorReferenceValue_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robotnik_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robotnik_msgs::MotorReferenceValue_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_msgs::MotorReferenceValue_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_msgs::MotorReferenceValue_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_msgs::MotorReferenceValue_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_msgs::MotorReferenceValue_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_msgs::MotorReferenceValue_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotnik_msgs::MotorReferenceValue_<ContainerAllocator> >
{
  static const char* value()
  {
    return "32c091680a0778bc1b7ba8846b79715b";
  }

  static const char* value(const ::robotnik_msgs::MotorReferenceValue_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x32c091680a0778bcULL;
  static const uint64_t static_value2 = 0x1b7ba8846b79715bULL;
};

template<class ContainerAllocator>
struct DataType< ::robotnik_msgs::MotorReferenceValue_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotnik_msgs/MotorReferenceValue";
  }

  static const char* value(const ::robotnik_msgs::MotorReferenceValue_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotnik_msgs::MotorReferenceValue_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 target_value\n"
"int32 target_ref\n"
"float32 actual_value\n"
"int32 actual_ref\n"
;
  }

  static const char* value(const ::robotnik_msgs::MotorReferenceValue_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotnik_msgs::MotorReferenceValue_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target_value);
      stream.next(m.target_ref);
      stream.next(m.actual_value);
      stream.next(m.actual_ref);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorReferenceValue_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotnik_msgs::MotorReferenceValue_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotnik_msgs::MotorReferenceValue_<ContainerAllocator>& v)
  {
    s << indent << "target_value: ";
    Printer<float>::stream(s, indent + "  ", v.target_value);
    s << indent << "target_ref: ";
    Printer<int32_t>::stream(s, indent + "  ", v.target_ref);
    s << indent << "actual_value: ";
    Printer<float>::stream(s, indent + "  ", v.actual_value);
    s << indent << "actual_ref: ";
    Printer<int32_t>::stream(s, indent + "  ", v.actual_ref);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTNIK_MSGS_MESSAGE_MOTORREFERENCEVALUE_H
