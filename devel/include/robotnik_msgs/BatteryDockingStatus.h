// Generated by gencpp from file robotnik_msgs/BatteryDockingStatus.msg
// DO NOT EDIT!


#ifndef ROBOTNIK_MSGS_MESSAGE_BATTERYDOCKINGSTATUS_H
#define ROBOTNIK_MSGS_MESSAGE_BATTERYDOCKINGSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robotnik_msgs
{
template <class ContainerAllocator>
struct BatteryDockingStatus_
{
  typedef BatteryDockingStatus_<ContainerAllocator> Type;

  BatteryDockingStatus_()
    : operation_mode()
    , contact_relay_status(false)
    , charger_relay_status(false)  {
    }
  BatteryDockingStatus_(const ContainerAllocator& _alloc)
    : operation_mode(_alloc)
    , contact_relay_status(false)
    , charger_relay_status(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _operation_mode_type;
  _operation_mode_type operation_mode;

   typedef uint8_t _contact_relay_status_type;
  _contact_relay_status_type contact_relay_status;

   typedef uint8_t _charger_relay_status_type;
  _charger_relay_status_type charger_relay_status;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(MODE_DISABLED)
  #undef MODE_DISABLED
#endif
#if defined(_WIN32) && defined(MODE_AUTO_HW)
  #undef MODE_AUTO_HW
#endif
#if defined(_WIN32) && defined(MODE_AUTO_SW)
  #undef MODE_AUTO_SW
#endif
#if defined(_WIN32) && defined(MODE_MANUAL_SW)
  #undef MODE_MANUAL_SW
#endif


  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> MODE_DISABLED;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> MODE_AUTO_HW;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> MODE_AUTO_SW;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> MODE_MANUAL_SW;

  typedef boost::shared_ptr< ::robotnik_msgs::BatteryDockingStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotnik_msgs::BatteryDockingStatus_<ContainerAllocator> const> ConstPtr;

}; // struct BatteryDockingStatus_

typedef ::robotnik_msgs::BatteryDockingStatus_<std::allocator<void> > BatteryDockingStatus;

typedef boost::shared_ptr< ::robotnik_msgs::BatteryDockingStatus > BatteryDockingStatusPtr;
typedef boost::shared_ptr< ::robotnik_msgs::BatteryDockingStatus const> BatteryDockingStatusConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      BatteryDockingStatus_<ContainerAllocator>::MODE_DISABLED =
        
          "disabled"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      BatteryDockingStatus_<ContainerAllocator>::MODE_AUTO_HW =
        
          "automatic_hw"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      BatteryDockingStatus_<ContainerAllocator>::MODE_AUTO_SW =
        
          "automatic_sw"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      BatteryDockingStatus_<ContainerAllocator>::MODE_MANUAL_SW =
        
          "manual_sw"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotnik_msgs::BatteryDockingStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotnik_msgs::BatteryDockingStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robotnik_msgs::BatteryDockingStatus_<ContainerAllocator1> & lhs, const ::robotnik_msgs::BatteryDockingStatus_<ContainerAllocator2> & rhs)
{
  return lhs.operation_mode == rhs.operation_mode &&
    lhs.contact_relay_status == rhs.contact_relay_status &&
    lhs.charger_relay_status == rhs.charger_relay_status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robotnik_msgs::BatteryDockingStatus_<ContainerAllocator1> & lhs, const ::robotnik_msgs::BatteryDockingStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robotnik_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robotnik_msgs::BatteryDockingStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_msgs::BatteryDockingStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_msgs::BatteryDockingStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_msgs::BatteryDockingStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_msgs::BatteryDockingStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_msgs::BatteryDockingStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotnik_msgs::BatteryDockingStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d7c3a4e25e4a4a665c4a1dd0862edfc2";
  }

  static const char* value(const ::robotnik_msgs::BatteryDockingStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd7c3a4e25e4a4a66ULL;
  static const uint64_t static_value2 = 0x5c4a1dd0862edfc2ULL;
};

template<class ContainerAllocator>
struct DataType< ::robotnik_msgs::BatteryDockingStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotnik_msgs/BatteryDockingStatus";
  }

  static const char* value(const ::robotnik_msgs::BatteryDockingStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotnik_msgs::BatteryDockingStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Modes of operation:\n"
"# no docking station contacts\n"
"string MODE_DISABLED=disabled\n"
"# Unattended relay detection & activation with no inputs/outputs feedback. Done by the hw\n"
"string MODE_AUTO_HW=automatic_hw\n"
"# Unattended relay detection & activation with inputs/outputs feedback. Done by the sw\n"
"string MODE_AUTO_SW=automatic_sw\n"
"# Unattended relay detection & and manual activation of the charging relay\n"
"string MODE_MANUAL_SW=manual_sw\n"
"\n"
"string operation_mode\n"
"	\n"
"bool contact_relay_status	# shows if there's contact with the charger\n"
"bool charger_relay_status   # shows if the relay for the charge is active or not\n"
;
  }

  static const char* value(const ::robotnik_msgs::BatteryDockingStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotnik_msgs::BatteryDockingStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.operation_mode);
      stream.next(m.contact_relay_status);
      stream.next(m.charger_relay_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BatteryDockingStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotnik_msgs::BatteryDockingStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotnik_msgs::BatteryDockingStatus_<ContainerAllocator>& v)
  {
    s << indent << "operation_mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.operation_mode);
    s << indent << "contact_relay_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.contact_relay_status);
    s << indent << "charger_relay_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.charger_relay_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTNIK_MSGS_MESSAGE_BATTERYDOCKINGSTATUS_H
