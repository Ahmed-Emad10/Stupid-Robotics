// Generated by gencpp from file robotnik_msgs/OdomManualCalibrationStatus.msg
// DO NOT EDIT!


#ifndef ROBOTNIK_MSGS_MESSAGE_ODOMMANUALCALIBRATIONSTATUS_H
#define ROBOTNIK_MSGS_MESSAGE_ODOMMANUALCALIBRATIONSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>

namespace robotnik_msgs
{
template <class ContainerAllocator>
struct OdomManualCalibrationStatus_
{
  typedef OdomManualCalibrationStatus_<ContainerAllocator> Type;

  OdomManualCalibrationStatus_()
    : odom_increment()
    , real_increment()
    , linear_error(0.0)
    , angular_error(0.0)  {
    }
  OdomManualCalibrationStatus_(const ContainerAllocator& _alloc)
    : odom_increment(_alloc)
    , real_increment(_alloc)
    , linear_error(0.0)
    , angular_error(0.0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _odom_increment_type;
  _odom_increment_type odom_increment;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _real_increment_type;
  _real_increment_type real_increment;

   typedef float _linear_error_type;
  _linear_error_type linear_error;

   typedef float _angular_error_type;
  _angular_error_type angular_error;





  typedef boost::shared_ptr< ::robotnik_msgs::OdomManualCalibrationStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotnik_msgs::OdomManualCalibrationStatus_<ContainerAllocator> const> ConstPtr;

}; // struct OdomManualCalibrationStatus_

typedef ::robotnik_msgs::OdomManualCalibrationStatus_<std::allocator<void> > OdomManualCalibrationStatus;

typedef boost::shared_ptr< ::robotnik_msgs::OdomManualCalibrationStatus > OdomManualCalibrationStatusPtr;
typedef boost::shared_ptr< ::robotnik_msgs::OdomManualCalibrationStatus const> OdomManualCalibrationStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotnik_msgs::OdomManualCalibrationStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotnik_msgs::OdomManualCalibrationStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robotnik_msgs::OdomManualCalibrationStatus_<ContainerAllocator1> & lhs, const ::robotnik_msgs::OdomManualCalibrationStatus_<ContainerAllocator2> & rhs)
{
  return lhs.odom_increment == rhs.odom_increment &&
    lhs.real_increment == rhs.real_increment &&
    lhs.linear_error == rhs.linear_error &&
    lhs.angular_error == rhs.angular_error;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robotnik_msgs::OdomManualCalibrationStatus_<ContainerAllocator1> & lhs, const ::robotnik_msgs::OdomManualCalibrationStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robotnik_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robotnik_msgs::OdomManualCalibrationStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_msgs::OdomManualCalibrationStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_msgs::OdomManualCalibrationStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_msgs::OdomManualCalibrationStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_msgs::OdomManualCalibrationStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_msgs::OdomManualCalibrationStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotnik_msgs::OdomManualCalibrationStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f77436bc07e4185538807c200cd1cc07";
  }

  static const char* value(const ::robotnik_msgs::OdomManualCalibrationStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf77436bc07e41855ULL;
  static const uint64_t static_value2 = 0x38807c200cd1cc07ULL;
};

template<class ContainerAllocator>
struct DataType< ::robotnik_msgs::OdomManualCalibrationStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotnik_msgs/OdomManualCalibrationStatus";
  }

  static const char* value(const ::robotnik_msgs::OdomManualCalibrationStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotnik_msgs::OdomManualCalibrationStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Pose odom_increment             # odometry increment since last reset\n"
"geometry_msgs/Pose real_increment             # real increment since last reset\n"
"\n"
"float32 linear_error            # linear error between odom and real since last reset\n"
"float32 angular_error           # angular error between odom and real since last reset\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::robotnik_msgs::OdomManualCalibrationStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotnik_msgs::OdomManualCalibrationStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.odom_increment);
      stream.next(m.real_increment);
      stream.next(m.linear_error);
      stream.next(m.angular_error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OdomManualCalibrationStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotnik_msgs::OdomManualCalibrationStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotnik_msgs::OdomManualCalibrationStatus_<ContainerAllocator>& v)
  {
    s << indent << "odom_increment: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.odom_increment);
    s << indent << "real_increment: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.real_increment);
    s << indent << "linear_error: ";
    Printer<float>::stream(s, indent + "  ", v.linear_error);
    s << indent << "angular_error: ";
    Printer<float>::stream(s, indent + "  ", v.angular_error);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTNIK_MSGS_MESSAGE_ODOMMANUALCALIBRATIONSTATUS_H
