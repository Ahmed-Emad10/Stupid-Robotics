// Generated by gencpp from file robotnik_msgs/alarmmonitor.msg
// DO NOT EDIT!


#ifndef ROBOTNIK_MSGS_MESSAGE_ALARMMONITOR_H
#define ROBOTNIK_MSGS_MESSAGE_ALARMMONITOR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robotnik_msgs
{
template <class ContainerAllocator>
struct alarmmonitor_
{
  typedef alarmmonitor_<ContainerAllocator> Type;

  alarmmonitor_()
    : type()
    , display(0)
    , component()
    , hmi(false)
    , group()
    , text()
    , seconds_active(0)  {
    }
  alarmmonitor_(const ContainerAllocator& _alloc)
    : type(_alloc)
    , display(0)
    , component(_alloc)
    , hmi(false)
    , group(_alloc)
    , text(_alloc)
    , seconds_active(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _type_type;
  _type_type type;

   typedef int32_t _display_type;
  _display_type display;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _component_type;
  _component_type component;

   typedef uint8_t _hmi_type;
  _hmi_type hmi;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _group_type;
  _group_type group;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _text_type;
  _text_type text;

   typedef uint64_t _seconds_active_type;
  _seconds_active_type seconds_active;





  typedef boost::shared_ptr< ::robotnik_msgs::alarmmonitor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotnik_msgs::alarmmonitor_<ContainerAllocator> const> ConstPtr;

}; // struct alarmmonitor_

typedef ::robotnik_msgs::alarmmonitor_<std::allocator<void> > alarmmonitor;

typedef boost::shared_ptr< ::robotnik_msgs::alarmmonitor > alarmmonitorPtr;
typedef boost::shared_ptr< ::robotnik_msgs::alarmmonitor const> alarmmonitorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotnik_msgs::alarmmonitor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotnik_msgs::alarmmonitor_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robotnik_msgs::alarmmonitor_<ContainerAllocator1> & lhs, const ::robotnik_msgs::alarmmonitor_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.display == rhs.display &&
    lhs.component == rhs.component &&
    lhs.hmi == rhs.hmi &&
    lhs.group == rhs.group &&
    lhs.text == rhs.text &&
    lhs.seconds_active == rhs.seconds_active;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robotnik_msgs::alarmmonitor_<ContainerAllocator1> & lhs, const ::robotnik_msgs::alarmmonitor_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robotnik_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robotnik_msgs::alarmmonitor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_msgs::alarmmonitor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_msgs::alarmmonitor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_msgs::alarmmonitor_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_msgs::alarmmonitor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_msgs::alarmmonitor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotnik_msgs::alarmmonitor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bb3d91213f2300b7fc9bb9063b1a7b1e";
  }

  static const char* value(const ::robotnik_msgs::alarmmonitor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbb3d91213f2300b7ULL;
  static const uint64_t static_value2 = 0xfc9bb9063b1a7b1eULL;
};

template<class ContainerAllocator>
struct DataType< ::robotnik_msgs::alarmmonitor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotnik_msgs/alarmmonitor";
  }

  static const char* value(const ::robotnik_msgs::alarmmonitor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotnik_msgs::alarmmonitor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# type: error, warning, event\n"
"string type\n"
"# displaing number for monitoring\n"
"int32 display\n"
"# component\n"
"string component\n"
"# To be shown in HMI\n"
"bool hmi\n"
"# group: alarm group all alarms of same group will be reset at same time\n"
"string group\n"
"# text: more explained information about alarm, should include group, time, conditions, etc\n"
"string text\n"
"# seconds active\n"
"uint64 seconds_active\n"
;
  }

  static const char* value(const ::robotnik_msgs::alarmmonitor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotnik_msgs::alarmmonitor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.display);
      stream.next(m.component);
      stream.next(m.hmi);
      stream.next(m.group);
      stream.next(m.text);
      stream.next(m.seconds_active);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct alarmmonitor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotnik_msgs::alarmmonitor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotnik_msgs::alarmmonitor_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.type);
    s << indent << "display: ";
    Printer<int32_t>::stream(s, indent + "  ", v.display);
    s << indent << "component: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.component);
    s << indent << "hmi: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hmi);
    s << indent << "group: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.group);
    s << indent << "text: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.text);
    s << indent << "seconds_active: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.seconds_active);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTNIK_MSGS_MESSAGE_ALARMMONITOR_H
